#!/usr/bin/python3

from argparse import ArgumentParser
from matplotlib import pyplot
from os.path import basename
from sys import argv, stdin

def main():
	linegraph = basename(argv[0]) == 'linegraph'

	parser = ArgumentParser()
	parser.add_argument('-e', action = 'store_true', help = 'Draw error bars using alternate columns')
	if not linegraph:
		parser.add_argument('-l', action = 'store_true', help = 'Use log scale')
	parser.add_argument('dest', help = 'Destination filename')
	args = parser.parse_args()
	errorbars = args.e
	if not linegraph:
		logscale = args.l

	title = input().strip()
	labels = input().strip().split(',')
	xlabel = labels[0]
	slabels = [labels[col] for col in range(1, len(labels), 2)] if errorbars else labels[1:]
	data = []
	for line in stdin:
		data += [line.strip().split(',')]
	if linegraph:
		indeps = [float(each[0]) for each in data]
	else:
		indeps = [each[0] for each in data]
	series = [[float(col) for col in each[1:]] for each in data]
	errors = [[float(each[index]) for index in range(1, len(each), 2)] for each in series]
	if errorbars:
		series = [[float(each[col]) for col in range(0, len(each), 2)] for each in series]

	offsets = [index + 0.1 for index in range(len(data))]
	if not linegraph:
		pyplot.xticks(offsets, indeps, rotation = -45, horizontalalignment = 'left')
	if linegraph:
		for index in range(len(series[0])):
			pyplot.errorbar(indeps, [row[index] for row in series], yerr = [row[index] for row in errors] if errorbars else None)
	else:
		pyplot.bar(offsets, [row[0] for row in series], log = logscale, yerr = [row[0] for row in errors] if errorbars else None)
	if not linegraph and logscale:
		pyplot.ylim(10 ** 0, 10 ** 5)
	else:
		pyplot.ylim(0)
	pyplot.title(title)
	pyplot.xlabel(xlabel)
	if len(slabels) == 1:
		pyplot.ylabel(*slabels)
	else:
		pyplot.legend(slabels)

	pyplot.savefig(args.dest, bbox_inches = 'tight')

if __name__ == '__main__':
	main()
